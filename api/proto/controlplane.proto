syntax = "proto3";

package controlplane;
option go_package = "github.com/iuliansafta/control-plane/api/proto";

enum NetworkMode {
    NETWORK_MODE_UNSPECIFIED = 0; // Defaults to HOST
    NETWORK_MODE_HOST = 1;
    NETWORK_MODE_BRIDGE = 2;
}

service ControlPlane {
    rpc DeployApplication(DeployRequest) returns (DeployResponse);
    rpc DeleteApplication(DeleteRequest) returns (DeleteResponse);
    rpc GetApplicationStatus(StatusRequest) returns (StatusResponse);
    rpc GetApplicationLogs(LogsRequest) returns (LogsResponse); //TODO: need to implement this
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

message TraefikConfig {
    bool enable = 1;
    string host = 2;
    string entrypoint = 3;
    bool enable_ssl = 4;
    string ssl_host = 5;
    string cert_resolver = 6;
    string health_check_path = 7;
    string health_check_interval = 8;
    string path_prefix = 9;
    repeated string middlewares = 10;
    map<string, string> custom_labels = 11;
}

message DeployRequest {
    string name = 1;
    string image = 2;
    int32 replicas = 3;
    double cpu = 4;
    int64 memory = 5;
    string region = 6;
    map<string, string> labels = 7;
    TraefikConfig traefik = 8;
    NetworkMode network_mode = 9;
}

message DeployResponse {
    string deployment_id = 1;
    string status = 2;
    string message = 3;
}

message DeleteRequest {
    string deployment_id = 1;
    string container_id = 2;
}

message DeleteResponse {
    bool success = 1;
    string message = 2;
}

message StatusRequest {
    string deployment_id = 1;
}

message AllocationStatus {
    string allocation_id = 1;
    string node_id = 2;
    string node_name = 3;
    string status = 4;
    string desired_status = 5;
    int64 create_time = 6;
    int64 modify_time = 7;
    map<string, string> task_states = 8;
}

message StatusResponse {
    string deployment_id = 1;
    string job_status = 2;
    string job_type = 3;
    int32 desired_instances = 4;
    int32 running_instances = 5;
    repeated AllocationStatus allocations = 6;
    string message = 7;
}

message LogsRequest {
    string deployment_id = 1;
    string allocation_id = 2;
    string task_name = 3;
    bool follow = 4;
    int32 tail_lines = 5;
    string log_type = 6;
}

message LogsResponse {
    repeated string log_lines = 1;
    string message = 2;
    bool success = 3;
}

message HealthCheckRequest {
    string service = 1;
}

enum HealthStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
}

message HealthCheckResponse {
    HealthStatus status = 1;
    string message = 2;
    int64 timestamp = 3;
}
